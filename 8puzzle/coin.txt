private Node first = null;
    private Node last = null;
    private int size;

    private class Node {
        Item item;
        Node next;
        Node prev;
    }

    // construct an empty deque
    public Deque() {
        size = 0;
    }

    // is the deque empty?
    public boolean isEmpty() {
        return size == 0;
    }

    // return the number of items on the deque
    public int size() {
        return size;
    }

    // add the item to the front
    public void addFirst(Item item) {
        Node oldfirst = first;
        first = new Node();
        first.item = item;
        first.prev = null;
        if (isEmpty()) {
            last = first;
            last.next = null;
        }
        else {
            first.next = oldfirst;
            oldfirst.prev = first;
        }
        size += 1;
    }

    // add the item to the back
    public void addLast(Item item) {
        Node oldlast = last;
        last = new Node();
        last.item = item;
        last.next = null;
        if (isEmpty()) {
            first = last;
            first.prev = null;
        }
        else {
            last.prev = oldlast;
            oldlast.next = last;
        }

        size += 1;

    }

    // remove and return the item from the front
    public Item removeFirst() {
        size -= 1;
        Item item = first.item;
        first = first.next;
        if (isEmpty()) last = null;
        return item;
    }

    // remove and return the item from the back
    public Item removeLast() {
        size -= 1;
        Item item = last.item;
        last = last.prev;
        if (isEmpty()) first = null;
        return item;
    }

    // return an iterator over items in order from front to back
    public Iterator<Item> iterator() {
        return new ListIterator();
    }

    private class ListIterator implements Iterator<Item> {

        private Node current = first;
        private Node previous;

        public boolean hasNext() {
            return current != null && previous != last;
        }

        public Item next() {
            Item item = current.item;
            previous = current;
            current = current.next;
            return item;
        }

    }
